<?php

namespace App\Controllers;

use CodeIgniter\RESTful\ResourceController;

require_once APPPATH . 'ThirdParty/Firebase/' . 'jwt/src/BeforeValidException.php';
require_once APPPATH . 'ThirdParty/Firebase/' . 'jwt/src/ExpiredException.php';
require_once APPPATH . 'ThirdParty/Firebase/' . 'jwt/src/SignatureInvalidException.php';
require_once APPPATH . 'ThirdParty/Firebase/' . 'jwt/src/JWT.php';

use Firebase\JWT\JWT;


use App\Models\UsersModel;

class UsersController extends ResourceController
{
    public function __construct()
    {
        $this->user = new UsersModel();
    }

    public function privateKey()
    {
        $privateKey = <<<EOD
            -----BEGIN RSA PRIVATE KEY-----
            MIICXAIBAAKBgQC8kGa1pSjbSYZVebtTRBLxBz5H4i2p/llLCrEeQhta5kaQu/Rn
            vuER4W8oDH3+3iuIYW4VQAzyqFpwuzjkDI+17t5t0tyazyZ8JXw+KgXTxldMPEL9
            5+qVhgXvwtihXC1c5oGbRlEDvDF6Sa53rcFVsYJ4ehde/zUxo6UvS7UrBQIDAQAB
            AoGAb/MXV46XxCFRxNuB8LyAtmLDgi/xRnTAlMHjSACddwkyKem8//8eZtw9fzxz
            bWZ/1/doQOuHBGYZU8aDzzj59FZ78dyzNFoF91hbvZKkg+6wGyd/LrGVEB+Xre0J
            Nil0GReM2AHDNZUYRv+HYJPIOrB0CRczLQsgFJ8K6aAD6F0CQQDzbpjYdx10qgK1
            cP59UHiHjPZYC0loEsk7s+hUmT3QHerAQJMZWC11Qrn2N+ybwwNblDKv+s5qgMQ5
            5tNoQ9IfAkEAxkyffU6ythpg/H0Ixe1I2rd0GbF05biIzO/i77Det3n4YsJVlDck
            ZkcvY3SK2iRIL4c9yY6hlIhs+K9wXTtGWwJBAO9Dskl48mO7woPR9uD22jDpNSwe
            k90OMepTjzSvlhjbfuPN1IdhqvSJTDychRwn1kIJ7LQZgQ8fVz9OCFZ/6qMCQGOb
            qaGwHmUK6xzpUbbacnYrIM6nLSkXgOAwv7XXCojvY614ILTK3iXiLBOxPu5Eu13k
            eUz9sHyD6vkgZzjtxXECQAkp4Xerf5TGfQXGXhxIX52yH+N2LtujCdkQZjXAsGdm
            B2zNzvrlgRmgBrklMTrMYgm1NPcW+bRLGcwgW2PTvNM=
            -----END RSA PRIVATE KEY-----
            EOD;

        return $privateKey;
    }
    
    public function publicKey()
    {
        $publicKey = <<<EOD
            -----BEGIN PUBLIC KEY-----
            MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC8kGa1pSjbSYZVebtTRBLxBz5H
            4i2p/llLCrEeQhta5kaQu/RnvuER4W8oDH3+3iuIYW4VQAzyqFpwuzjkDI+17t5t
            0tyazyZ8JXw+KgXTxldMPEL95+qVhgXvwtihXC1c5oGbRlEDvDF6Sa53rcFVsYJ4
            ehde/zUxo6UvS7UrBQIDAQAB
            -----END PUBLIC KEY-----
            EOD;

        return $publicKey;
    }

    public function login()
    {
        $email = $this->request->getPost('email');
        $password = $this->request->getPost('password');

        // Check Login
        $check_login = $this->user->check_login($email);

        // dd($check_login);

        if (password_verify($password, $check_login['password'])) 
        {
            // Success Login
            // Generate Token
            $secret_key = $this->privateKey();

            $issuer_claim = "THE_CLAIM";
            
            $audience_claim = "THE_AUDIENCE";

            $issued_at_claim = time();

            $not_before_claim = $issued_at_claim + 10;

            $expire_claim = $issued_at_claim + 3600; // in seconds

            $token = [
                'iss' => $issuer_claim,
                'aud' => $audience_claim,
                'iat' => $issued_at_claim,
                'ndf' => $not_before_claim,
                'exp' => $expire_claim,
                'data' => [
                    'user_id' => $check_login['user_id'],
                    'first_name' => $check_login['first_name'],
                    'last_name' => $check_login['last_name'],
                    'email' => $check_login['email'],
                    'password' => $check_login['password'],
                ]
            ];

            // Generate Token
            $token = JWT::encode($token, $secret_key, 'RS256');

            $output = [
                'status' => 200,
                'message' => 'Login Successfully',
                'token' => $token,
                'expire' => $expire_claim
            ];

            return $this->respond($output, 200);
        }
        else 
        {
            $output = [
                'status' => 401,
                'message' => 'Login Failed'
            ];

            return $this->respond($output, 401);
        }
    }

    /**
     * Return an array of resource objects, themselves in array format
     *
     * @return mixed
     */
    public function index()
    {
        //
    }

    /**
     * Return the properties of a resource object
     *
     * @return mixed
     */
    public function show($id = null)
    {
        //
    }

    /**
     * Return a new resource object, with default properties
     *
     * @return mixed
     */
    public function new()
    {
        //
    }

    /**
     * Create a new resource object, from "posted" parameters
     *
     * @return mixed
     */
    public function create()
    {

        $data = [
            'first_name' => $this->request->getPost('first_name'),
            
            'last_name' => $this->request->getPost('last_name'),
            
            'email' => $this->request->getPost('email'),

            // Generate password to hash    
            'password' => password_hash($this->request->getPost('password'), PASSWORD_BCRYPT)
        ];

        // Insert data to table users
        $result = $this->user->register($data);

        if ($result == true) 
        {
            $output = [
                'status' => 200,
                'message' => 'User Created Successfully'
            ];

            return $this->respond($output, 200);
        }
        else 
        {
            $output = [
                'status' => 401,
                'message' => 'Unable to Create User Sorry'
            ];

            return $this->respond($output, 401);
        }
    }

    /**
     * Return the editable properties of a resource object
     *
     * @return mixed
     */
    public function edit($id = null)
    {
        //
    }

    /**
     * Add or update a model resource, from "posted" properties
     *
     * @return mixed
     */
    public function update($id = null)
    {
        //
    }

    /**
     * Delete the designated resource object from the model
     *
     * @return mixed
     */
    public function delete($id = null)
    {
        //
    }

    
}
